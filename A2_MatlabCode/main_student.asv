clear;
close all;
warning off
 
 
%put your netid address here
my_imei_netid = 'jcs493'; %<---------- input your net id
 
 
% location of data directory
%dataDir = [pwd,'\a3_part2_student\'];
dataDir = 'C:\Users\Hane\Desktop\a3_part2_student\a3_part2_student\A3_2014_15\uploads';
dataDirNames = dir(dataDir);
fprintf('Before you proceed look at the organization of the data folder\nPress any key to continue.....\n');
pause
 
k = 1;
featureMartix = [];
phone_position = []; %1 hand, 0 for pocket
subjectIds = {};
for i = 1:length(dataDirNames)
           
    %goes through all of the directories representing all imei addresses
    if exist([dataDir dataDirNames(i).name],'dir') == 7 && dataDirNames(i).name(1) ~= '.'
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % assign subject id
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        if strcmp(dataDirNames(i).name,my_imei_netid)
            index = 0; %assign zero index to the current subject (with specified imei)
        else
            index = k;
            subjectIds{k,1} = dataDirNames(i).name; %assign subejctId
            k = k + 1;
        end
        fprintf('Processing directory %s\n',dataDirNames(i).name);
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % compute raw data
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        dirName = [dataDir dataDirNames(i).name '/']; %specify where data is in the folder
        
        %
        % raw_data_vector: N*4 dimensional. Contains raw accelerometer and
        %       barometer data. First 3 dimensions represent the 3 axes of
        %       accelerometer.
        % raw_data_label: Contains labels for data points in raw_data_vector
        % bar_ts: has timestamp data for barometric pressure. This works
        %       as timestamps for raw_data_vector and raw_data_label
        %
        [raw_data_vector,raw_data_label, bar_ts] = computeRawData( dirName ); %do a visualize on or off
        save([dataDir 'data_' dataDirNames(i).name '.mat'],'raw_data_vector','raw_data_label','bar_ts');
        
        
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % compute the features
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        load([dataDir 'data_' dataDirNames(i).name '.mat'])
        
        %
        %CORRECTION:
        % featureVector : N*16 dimensional.
        %       Column 1 to 14 are different features computed. Look at
        %           'print_top_five_features.m' file for a complete
        %           description of the features
        %       Last column of featureVector is
        %           subjectId. 0 represent your data if you set the right imei
        %       2nd to last column of featureVector is labels
        %
        
        featureVector = extractFeatures([dataDir 'data_' dataDirNames(i).name '.mat'] );
        featureVector = [featureVector  index*ones(size(featureVector,1),1)]; %last column is subject id, 2nd to last column is activity label
        save([dataDir 'data_' dataDirNames(i).name '.mat'],'raw_data_vector','raw_data_label','bar_ts','featureVector');
 
        
        
        %load into feature martrix
        featureMartix = [ featureMartix  ; featureVector ];
    end
end
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%        visulaize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
%load your data to visualize
load([dataDir 'data_' my_imei_netid '.mat']);
load label_names
fprintf('Visualizeing raw data and features\n');
 
addpath('./libs/')
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% plot raw data
% visualizes raw data to get a sense what features might work
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
activity_names_indexed=activity_names_indexed(1:7,1);
%compute accelerometer magnitude
accel_mag = sqrt(raw_data_vector(:,1).^2 + raw_data_vector(:,2).^2 + raw_data_vector(:,3).^2);
%activity_names_indexed=activity_names_indexed(1:7,1);
%plot raw data
figure(1)
subplot(312)
plot(accel_mag) %accelerometer magnitude
axis tight
ylim([0 30])
xlabel('accelerometer magnitude')
grid on
subplot(313)
plot(raw_data_vector(:,4)) %barometric pressure
axis tight
xlabel('barometeric pressure')
grid on
subplot(311)
plot(featureVector(:,end-1))
axis tight
set(gca,'ytick',1:length(activity_names_indexed));
set(gca,'yticklabel',activity_names_indexed);
grid on
xlabel('labels')
ylim([0 length(activity_names_indexed)+1])
title('data')
 
% plot the top features
% visualize discriminating features
figure(2)
subplot(312)
plot((featureVector(:,2))) % variance of accelerometer magnitude
axis tight
ylim([0 70])
xlabel('accel magnitude variance')
subplot(313)
plot(featureVector(:,end-2)) %bar_slope
axis tight
xlabel('barometer slope')
subplot(311)
plot(featureVector(:,end-1))
axis tight
set(gca,'ytick',1:length(activity_names_indexed));
set(gca,'yticklabel',activity_names_indexed);
grid on
xlabel('labels')
ylim([0 length(activity_names_indexed)+1])
title('feature view')
fprintf('Press any key to continue.....\n');
pause

% ToDo: Explain what features do you think would help us 
 
 
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%   classification
%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%number of classes
no_of_classes = max(featureVector(:,end-1));
 
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% classify with subject's own data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
% construct a subject matrix, 5 fold cross validation
fprintf('Classification on users own data\n');
featureVector = featureMartix(featureMartix(:,end)==0,1:end-1);
 
%do 5 fold cross-validation
%confusion_matrix: contains the confusion matrix, here Predicted classes
%are across column and actual classes are now across rows.
%inferred_labels: contains the predicted label or the output of the
%classifier


[confusion_matrix, multiclass_model,inferred_labels] = five_fold_crossval(featureVector,no_of_classes);
 
 %activity_names_indexed=activity_names_indexed(1:7,1);
fprintf('        Visualing classification results and confusion matrix:\n');
% plot actual labels and inferred labels
figure;
subplot(211)
title('Inferred vs Actual (your data only)')
plot(featureVector(:,end)) %actual labels
axis tight
set(gca,'ytick',1:length(activity_names_indexed));
set(gca,'yticklabel',activity_names_indexed);
xlabel('actual labels')
grid on
ylim([0 length(activity_names_indexed)+1])
subplot(212)
plot(inferred_labels) %inferred labels
axis tight
set(gca,'ytick',1:length(activity_names_indexed));
set(gca,'yticklabel',activity_names_indexed);
xlabel('inferred labels')
ylim([0 length(activity_names_indexed)+1])
grid on
 
 
%plot confusion matrix
figure
imagesc(confusion_matrix)
colorbar('peer', gca(), 'eastoutside');
set(gca,'xtick',1:length(activity_names_indexed) + 0.5);
set(gca,'xticklabel',activity_names_indexed);
set(gca,'ytick',1:length(activity_names_indexed) + 0.5);
set(gca,'yticklabel',activity_names_indexed);
xticklabel_rotate([],90);
ylabel('predicted')
xlabel('actual')
title('Confusion matrix (within subject)')
 

%TO DO (Task 1): using the confusion matrix 
%compute precision,accuracy and recall for each of the activities
%individually
actual_labels = featureVector(:,end);






 
fprintf('Press any key to continue.....\n');
pause
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% classify subject's own data with data of others
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
fprintf('Classification subjects own data with data of others\n');
% construct training and test vectors
testFeatureVector = featureMartix(featureMartix(:,end)==0,1:end-1); %data of your imei
trainFeatureVector = featureMartix(featureMartix(:,end)~=0,1:end-1); %data of others
% train on data of others, test on your data
% confusion_matrix: contains the confusion matrix
% inferred_labels: contains inferred labels
% "confusion_matrix" structure has been transposed.
% Predicted classes are now across column.
% Actual classes are now across rows.
% New structure now matches the lecture slides.
% Consult the newly posted slides to see how to compute
% precision and recall.
[confusion_matrix,multiclass_model,inferred_labels] = eval_model(trainFeatureVector,testFeatureVector,no_of_classes);
 
 
%plot actual labels and inferred labels
figure;
subplot(211)
title('Inferred vs Actual (all subjects)')
plot(featureVector(:,end)) %actual labels
axis tight
set(gca,'ytick',1:length(activity_names_indexed));
set(gca,'yticklabel',activity_names_indexed);
xlabel('actual labels')
grid on
ylim([0 length(activity_names_indexed)+1])
subplot(212)
plot(inferred_labels) %inferred labels
axis tight
set(gca,'ytick',1:length(activity_names_indexed));
set(gca,'yticklabel',activity_names_indexed);
xlabel('inferred labels')
ylim([0 length(activity_names_indexed)+1])
grid on
 
 
%plot confusion matrix
figure
imagesc(confusion_matrix)
colorbar('peer', gca(), 'eastoutside');
set(gca,'xtick',1:length(activity_names_indexed) + 0.5);
set(gca,'xticklabel',activity_names_indexed);
set(gca,'ytick',1:length(activity_names_indexed) + 0.5);
set(gca,'yticklabel',activity_names_indexed);
%rotateXLabels( gca, 45 )
xticklabel_rotate([],90);
ylabel('predicted')
xlabel('actual')
title('Confusion matrix (all subjects)')
 
 
%plot top five distinguishing features of different activity
%TO DO (Task 2): comment on the top features and whether you agree on them
print_top_five_features(multiclass_model);
 

%TO DO (Task 3): using the confusion matrix compute
%accuracy, precision and recall for each of the activities individually


 
 
 
%TO DO (Task 4): Answer the following questions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Compare the results of Task 1 and Task 3 and explain the any differences.
%
%What does accuracy, recall and precision mean? Try to explain this in a intiutive way, dont just give definitions.
%
%Say, we built our classifier using the abovementioned approach, and now we
%deploy our classifier among a few participants in the real world. One of
%the users keeps his phone in his hand most of the time. How would our
%classifier perform? why?
 
 
 

 
 
 
 
 
 
 
 

